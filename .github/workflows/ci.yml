name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux-test:
    name: Linux Test
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq clang gcc-arm-none-eabi llvm mingw-w64 scons
    - name: Build with SCons
      run: |
        scons --jobs "$(nproc)"

  macos-test:
    name: macOS Test
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        brew install -q gcc-arm-embedded mingw-w64 scons
    - name: Build with SCons
      run: |
        scons --jobs "$(sysctl -n hw.ncpu)"

  windows-test:
    name: Windows Test
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        python -m pip install -qq scons
        choco install --limit-output --no-progress diffutils gcc-arm-embedded
    - name: Build with SCons
      run: |
        scons --jobs "$env:NUMBER_OF_PROCESSORS"

  python-test:
    name: Python Test (${{ matrix.os }}, python${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install -qq --upgrade pip
        python -m pip install -qq flake8 pytest wheel
    - name: Lint with flake8
      run: |
        # The GitHub editor is 127 chars wide
        flake8 . --count --max-complexity=10 --show-source --max-line-length=127 --statistics
    - name: Build and install package
      run: |
        python -m pip install .
    - name: Test with pytest
      run: |
        pytest --verbose --color=yes test

  black-check:
    name: Python Formatting
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install -qq --upgrade pip
        python -m pip install -qq black==21.12b0
    - name: Format with black
      run: |
        bash black-check.bash
